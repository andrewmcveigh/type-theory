* Symbols / Notation
  ⊢ https://en.wikipedia.org/wiki/Turnstile_(symbol)
  In the typed lambda calculus, the turnstile is used to separate typing
  assumptions from the typing judgement

  For assumptions /A/, expressions /e/ and type-scheme /σ/ we write
  /A/⊢/e/:/σ/

  Inference rule: https://en.wikipedia.org/wiki/Rule_of_inference
* λ-calculus

type constants
type variables
type operators
type scheme (polytype?)

fix : /∀α((α -> α) -> α)/


Simply typed λ-calculus syntax
/e ::= x | e e' | λx:τ.e | c/

λ-calculus syntax
/e ::= x | e e' | λx.e/

HM language syntax
id | application | lambda | let
/e ::= x | e e' | λx.e | let x = e in e'/

** Untyped λ-calculus syntax

#+begin_src clojure :tangle yes
(ns algorithm-w
  (:require [clojure.spec.alpha :as s]))

(s/def ::exp
  (s/or ::var ::var
        ::app ::app
        ::abs ::abs
        ::let ::let))

(s/def ::var simple-symbol?)

(s/def ::app
  (s/cat :op ::exp :args (s/* ::exp)))

(s/def ::abs
  (s/cat :fn #{'fn} :arg (s/and vector? (s/cat :arg ::var)) :exp ::exp))

(s/def ::let
  (s/cat :let #{'let}
         :bin (s/and vector? (s/cat :var ::var :exp ::exp))
         :exp ::exp))
#+end_src

Assuming a set of /type-variables α/ and primitive types /ι/, the syntax of
types /τ/ and of /type-schemes σ/ is given by:

τ ::= α | ι | τ -> τ
σ ::= τ ∀ασ

A type-scheme ∀α₁...αₙτ has /generic/ type variables α₁...αₙ. A /monotype μ/ is
a type containing no type variables.
* Unification
  Robinson 65

** Substitution, Unification, and Resolution
   The following definitions are concerned with the operation of instantiation,
   i.e. substitution of terms for variables in well-formed expressions and in
   sets of well-formed expressions, and with the various auxiliary notions
   needed to define resolution in general.

*** Substitution components.
    A substitution component is any expression of the form /T/V/, where /V/ is
    any variable and /T/ is any term different from /V/. /V/ is called the
    /variable/ of the component /T/V/, and /T/ is called the /term/ of the
    component /T/V/.

*** Substitutions
    A substitution is any finite set (possibly empty) of substitution components
    none of the variables of which are the same. If /P/ is any set of terms, and
    the terms of the components of the substitution /θ/ are all in /P/, we say
    that /θ/ is a substitution over /P/. We write the substitution whose
    components are /T₁/V₁,...,Tₖ/Vₖ/ as {/T₁/V₁,...,Tₖ/Vₖ/}, with the
    understanding that the order of the components is immaterial. We use
    lower-case Greek letters to denote substitutions. In particular, ε is the
    /empty substitution/.

*** Instantiation
    If /E/ is any finite string of symbols and

    /θ = {T₁/V₁...,Tₖ/Vₖ}/

    is any substitution, then the instantiation of /E/ by /θ/ is the operation
    of replacing each occurrence of the variable /Vᵢ, 1 ≤ i ≤ k/, in /E/ by
    and occurrence of the term /Tᵢ/. The resulting string, denoted by /Eθ/ is
    called the instance of /E/ by /θ/. I.e., if /E/ is the string
    /E₀Vᵢ,E₁...VᵢₙEₙ/, then /Eθ/ is the string /E₀Tᵢ₁E₁..TᵢₙEₙ/. Here, none of the
    substrings /Eᵢ/ of /E/ contain occurrences of the variables /V₁...,Vₖ/, some
    of the /Eᵢ/ are possibly null, /n/ is possibly 0, and each /Vᵢⱼ/ is an
    occurrence of one of the variables /V₁,...,Vₖ/. Any string /Eθ/ is called an
    instance of the string /E/. If /C/ is any set of strings and /θ/ a
    substitution, then the instance of /C/ by /θ/ is the set of all strings
    /Eθ/, where /E/ is in /C/. We denote this set by /Cθ/, and say that it is an
    instance of /C/.

*** Standardizations
    If /C/ is any finite set of string, and /V₁,...,Vₖ/ are all the distinct
    variables, in alphabetical order, which occur in strings in /C/, then the
    /x/-standardization of /C/, denoted by /ξc/, is the substitution
    /{x₁/V₁,...,xₖ/Vₖ} and the /y/-standardization of /C/, denoted by /ηc/, is
    the substitution

    /{y₁/V₁,...,yₖ/Vₖ}

*** Composition of substitutions

* Algorithm W

Unification is a recursive algorithm for determining a substitution of terms for
variables (i.e. a variable assignment) that makes two terms equal. For example
we can unify /f(a, y)/ with /f(x, f (b, x))/ with the substitution
/[a/x, f (b, a)/y]/ which should be read ‘substitute /a/ for /x/ and then
substitute /f(b, a)/ for /y/’.

The substitution /S/ is the composition /S = [f(b,x)/y] ◦ [a/x]/ of the two
separate substitutions /[a/x]/ and /[f(b,x)/y]/. Note that composition of
substitutions is right to left so that we perform the rightmost first, and we
apply the rightmost to the leftmost in the process of composing. The order
matters. It is easy to see that the substitution /S/ applied to /f(a, y)/ gives
/f(a, f(b, a))/ and when applied to /f(x, f (b, x))/ yields the same. Thus we
say /S/ is a unifier of /f(a, y)/ and /f(x, f(b, x))/.

** Occurs check


#+begin_src clojure :tangle yes
(defn occurs?
  "A variable `x` occurs in `term` if and only if `t = f(s[1],...s[n])` for
  `n > 0` and either `s[i] = x` or `x` occurs in `s[i]` for some
  `i = 1,2,...,n`"
  [x [t form]]
  (case t
    ::app
    (or (occurs? x (:op form))
        (when (contains? form :args)
          (let [[[t' x' :as h] & more] (:args form)]
            (or (and (= t' ::var) (= x x'))
                (occurs? x h)
                (and (seq more)
                     (occurs? x [::app (assoc form :args more)]))))))
    ::var
    (= x form)
    nil))
#+end_src

#+begin_src clojure
(defn substitute [coll term]
  (if (empty? coll)
    term
    (let [[t s] term]
      (case t
        ::var
        (let [[[t1 v1] & ss] coll]
          (if (= s v1) t1 (substitute ss term)))
        ::app
        (if-let [args (:args s)]
          [::app (assoc s :args (map (partial substitute coll) args))]
          term)))))
#+end_src

** Substitution composition
   The substitution /S/ is the composition /S = [f(b,x)/y] ◦ [a/x]/ of the two
   separate substitutions /[a/x]/ and /[f(b,x)/y]/. Note that composition of
   substitutions is right to left so that we perform the rightmost first, and we
   apply the rightmost to the leftmost in the process of composing. The order
   matters. It is easy to see that the substitution /S/ applied to /f(a,y)/
   gives /f(a,f(b,a))/ and when applied to /f(x,f(b,x))/ yields the same. Thus
   we say /S/ is a unifier of /f(a,y)/ and /f(x,f(b,x))/.

#+begin_src clojure
(defn compose [coll s1]
  (if (empty? coll)
    s1
    (let [iter (fn iter [acc s ss]
                 (if (seq ss)
                   (let [[[t1 v1] & ss'] ss]
                     (iter (conj acc [(substitute [s] t1) v1])
                           s
                           ss'))
                   acc))
          [head & tail] coll]
      (compose tail (cons head (iter [] head s1))))))

#+end_src

** Unification

   To find the most general unifier `U = MGU(t,t')` of terms `t` and `t`:

      (i) If `t = x` and `t' = y` then `U = [x/y]`
    (iia) If `t = x` and `t' = f(s[1],s[2],...,s[n])` and `x` does not occur in
          `t'` then `U = [t'/x]`
    (iib) If `t = f(s[1],s[2],...,s[n])` and `t' = x` and `x` does not occur in
          `t` then `U = [t/x]`
    (iii) If `t = a` and `t' = a` then `U = []`
     (iv) If `t = f(s[1],s[2],...,s[n])` and `t' = f(s[1],s[2],...,s[n])` then
          `U = MGU( f(U[1]s[2],U[1]s[3],...,s[n])
                  , f(U[1]s[2]',U[1]s[3]',...,s[n])) ◦ U[1]`
           where `U[1] = MGU(s[1]',s[1]')

   In any other circumstances the algorithm fails

#+begin_src clojure
(defn unify-ex [s]
  (throw (ex-info s {:type :unify})))

(declare unify*)

(defn unify-args [acc args1 args2]
  (cond (and (empty? args1) (empty? args2))
        acc
        (= (count args1) (count args2))
        (let [[t1 & t1s] args1
              [t2 & t2s] args2]
          (recur (compose (trampoline unify* []
                                      (substitute acc t1)
                                      (substitute acc t2))
                          acc)
                 t1s
                 t2s))
        :else (unify-ex "Arity")))

(defmulti unify* (fn [_ [t] [t']] [t t']))

(defmethod unify* [::var ::var]
  [acc [_ v :as t1] [_ v' :as t2]]
  (if (= v v')
    {}
    (assoc acc t1 v')))

(defmethod unify* [::var ::app]
  [acc [_ v :as t1] [_ v' :as t2]]
  (if (empty? (:args v'))
    (cons [t2 v] acc)
    (if (occurs? v t2)
      (unify-ex "Occurs")
      (cons [t2 v] acc))))

(defmethod unify* [::app ::var]
  [acc [_ v :as t1] [_ v' :as t2]]
  (if (empty? (:args v))
    (cons [t1 v'] acc)
    (if (occurs? v' t1)
      (unify-ex "Occurs")
      (cons [t1 v'] acc))))

(defmethod unify* [::app ::app]
  [acc [_ {name1 :op args1 :args}] [_ {name2 :op args2 :args}]]
  (if (= name1 name2)
    (trampoline unify-args acc args1 args2)
    (unify-ex "Const")))

(defn unify
  "To find the most general unifier `U = MGU(t,t')` of terms `t` and `t`:
      (i) If `t = x` and `t' = y` then `U = [x/y]`
    (iia) If `t = x` and `t' = f(s[1],s[2],...,s[n])` and `x` does not occur in
          `t'` then `U = [t'/x]`
    (iib) If `t = f(s[1],s[2],...,s[n])` and `t' = x` and `x` does not occur in
          `t` then `U = [t/x]`
    (iii) If `t = a` and `t' = a` then `U = []`
     (iv) If `t = f(s[1],s[2],...,s[n])` and `t' = f(s[1],s[2],...,s[n])` then
          `U = MGU( f(U[1]s[2],U[1]s[3],...,s[n])
                  , f(U[1]s[2]',U[1]s[3]',...,s[n])) ◦ U[1]`
           where `U[1] = MGU(s[1]',s[1]')
  In any other circumstances the algorithm fails"
  [t1 t2]
  (unify* () t1 t2))
#+end_src

** Algorithm W
W(Γ,e)=(S,τ) where

The Hindley-Milner Type Inference Algorithm
Ian Grant∗
January 17, 2011
http://steshaw.org/hm/hindley-milner.pdf

* Unification
